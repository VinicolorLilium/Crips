@use 'sass:math';
// Шаблоны (заготовки)
// @extend %имя шаблона;
// Сниппет (SCSS): ex
// Счетчик для списка
%listCounter {
  list-style-type: none;
  counter-reset: item;

  li {
    position: relative;

    &:before {
      counter-increment: item;
      content: counter(item);
      position: absolute;
      left: 0;
      top: 0;
    }
  }
}

// Адаптивное видео
%responsiveVideo {
  position: relative;
  overflow: hidden;
  height: 0;
  padding-bottom: 56.25%;

  video,
  iframe,
  object,
  embed {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
  }
}

// Видео в качестве фона
%videoBackground {

  video,
  iframe,
  object,
  embed {
    position: fixed;
    top: 50%;
    left: 50%;
    min-width: 100%;
    min-height: 100%;
    width: auto;
    height: auto;
    z-index: -100;
    transform: translateX(-50%) translateY(-50%);
    background-size: cover;
  }
}

// Серый фильтр
%grayfilter {
  transition: all 0.3s ease 0s;
  filter: grayscale(1);

  @media (any-hover: hover) {
    &:hover {
      filter: grayscale(0);
    }
  }
}

// Плавный скролл
%smoothscroll {
  -webkit-overflow-scrolling: touch;
}

// Скрыть скролл
%hidescroll {
  &::-webkit-scrollbar {
    display: none;
  }
}

//REM
@function rem($px) {
  $result: math.div($px, 16) + rem;
  @return $result;
}

//EM
@function em($px, $current: 16) {
  $result: math.div($px, $current) + em;
  @return $result;
}

//миксины
//использовать с  @include


@function rem($pixel) {
  @if math.is-unitless($pixel) {
    @return math.div($pixel, 16)+rem;
  }

  @else {
    @error 'Не используйте единицы измерения при работе с функцией rem()! Передавайте аргументом только числа.'
  }
}

@mixin flex-center {
  display: flex;
  justify-content: center;
  align-items: center;
}

@mixin bg {
  background-position: center;
  background-size: cover;
  background-repeat: no-repeat;
}